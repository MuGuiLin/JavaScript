
.sort()按字母顺序进行排序：a,b,c,d.....
.push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。

window.scrollTo(100,500)：窗口的滚动位置（左上角 X，Y）

var XXX=document.getElementById("consignee").value;//直接获取input框的value值;

<a href="javascript:;" onclick="indexheadpopup.style.display='none'">关 闭</a>

<div onclick="window.close();">关闭当前页</div>


点击超链接不跳转:

1：<a href="####"></a>

2：<a href="javascript:void(0)"></a>

3：<a href="javascript:void(null)"></a>

4：<a href="#" onclick="return false"></a>


.substring() 方法用于提取字符串中介于两个指定下标之间的字符。

例：取出第3个之后的所有字符串
<script type="text/javascript">

	var str="Hello world!";
	document.write(str.substring(3));

</script>
结果：lo world!

例：取出第2个之后8个之前的字符串
<script type="text/javascript">

	var str="Hello world!";

	document.write(str.substring(2,8));

</script>
结果：llo wo

例：取出第2个之后倒数第1个之前的字符串
<script type="text/javascript">

	var str="Hello world!";

	document.write(str.substring(2,str.substring.length -1));

</script>
结果：llo wo


var 是根据你所赋的值来决定数据类型的，一个变量最好只存一种数据类型
typeof() 判断数据类型
isNaN() 判断是不是数字
parseInt()将字符转为整数
parseFloat()将字符转为小数
Math.ceil()执行向上舍入，即它总是将数值向上舍入为最接近的整数；
Math.floor()执行向下舍入，即它总是将数值向下舍入为最接近的整数；
Math.round()执行标准舍入，即它总是将数值四舍五入为最接近的整数(这也是我们在数学课上学到的舍入规则)
this 当前发生事件的元素!
innerHTML:几乎所有的元素都有innerHTML属性,它是一个字符串(获取HTML当前标签的起始和结束里面的内容)


JavaScript eval()函数可计算某个字符串，并执行其中的的 JavaScript 代码
例：
eval("x=10;y=20;document.write(x*y)") //结果：200

document.write(eval("2+2"))  //结果：4
var x=10
document.write(eval(x+17))  //结果：27






/-----------流程控制:-----------/

if(){},if(){} else{},if(){},else if(){};?:判断

switch,判断

while循环 do while循环 

for(){},for in{}循环

break:终止所有循环；

continue:终止本次循环，下次继续循环

return:返回值(false,变量，数值)：




/-----------Json-----------/

Json和数组的用法一样,

它们的区别就是:
	数组：1、用下标[0123456.....],2、用lenght取长度，
	avr arr=[12,89,120];
	alert(arr[0])===12

	Json：1、用字母{a:59456,b:"asdfsadf"c:65.....}2、Json不能取长度，（取出来就是一串字符串）
	var obj={a:12,b:89,c120};
	alert(obj['a'])===12;
	 
	for(var i in obj)//json的下标从1开始的
	{}

Json和数组一起使用，（在Json中可以放：数组，而在数组中可以放：Json）for in
json:  var oBj={a:564,b:4568,c:'asdas',d:[1,2,3,44,5]}在Json中同时存：数字，字符串，数组；

alert(oBj.d[2])输出第4个序号的第3个值:44;

var arr=[{a:1,b:2,c:3,d:'mupiao'},{a:'你好',b:132456}

alert(arr.[0].d)输出第1个序号的第4个值:mupiao;


<script>
function mupiao(obj,json)//建立一个函数,mupiao (标签,json=(样式,值))
{
   //obj.style[attr]=value;

     var attr='';
     for(attr in json)//用for in 循环
     {
        obj.style[attr]=json[attr];
        //alert(attr+'==='+json[attr]);
     }
	
}
window.onload=function()
{
	var oDiv=documetn.getElementById('div1')
	mupiao(oDiv,{width:'100px',heitht:'100px',background:'blue'})//调用上面的json
}
</script>


/-----------函数:-----------/
function()匿名函数
{}
function mupiao()
{}
function mupiao(noe,two)有参函数
{erturn;}

arguments:可变参（不定参：不确定要传多少个参数）可来获取有多个参数，它和数组一起配合使用

用for(){}循环，arguments.length;获取总共有多少个参数

function sum()
{
	var result=0;
	for(var i=0;i<arguments.length;i++)
	{
		reseult+=arguments[i]
	}
	alert(result);
}
sum(12,8,207,456,2,548,65,4,86);传参；

如：arguments[0]: 这就是获取多个参数中的第1个参数

/-----------数组:-----------/
定义1:var mupiao=[45,86,845,65,1,56];
定义2:var mupiao=new Array[45,86,845,65,1,56];
上面这两种定义方法效果完全相同；
数组的属性：.length
数组的排序：sort([比效函数])


/-----------事件:-----------/
document:是什么?,本质:document.childNodes[0].tagName
	document就是网页(文档),它位于整个网页的第1个父节点,是最大最外面的一个标签,哪怕是头文件,或者是HTML这个标签都被document包含在里面,可以这样说:网页上的所有东西都包含在document里面,所以它是网页中最顶层的父节点;


1、鼠标事件:
onclick = onmousedown + onmouseup

onclick:鼠标点击事件
onmousedown:鼠标按下事件
onmousemove:鼠标拖动事件
onmouseup:鼠标抬起事件

onmouseover:鼠标移入事件
onmouseout:鼠标移出事件


2、键盘事件:
onpress = onkeydown + onkeyup

onkeydown:按下按键时的事件
onkeyup:松开按键时的事件

keyCode:键盘键值（检测用户按下了哪个按键）


/-----------DOM-----------/
DOM作用：
	它是JS的组件（组成）用来帮助JS操作网页，页面中的元素，如标签，DIV，点击改背景色等，

其是网页是由很多很多的标签(元素)组成的，而标签也叫节点，元素节点分为父节点，和子节点（子节点只有一层，而子节点下面的节点是不算的，比如，ul,和li,而li下如果还有标签的节点是不算的，）

创建DOM元素：
createElement(标签名):创建一个节点；
appendChild(节点)：追加一个节点；
insertBefore(节点，原有节点)；在已有元素前插入一个节点；

删除DOM元素：
removeChild(节点)：删除一个节点；

DOM节点:
childNodes:获取标签元素的子节点
parentNode(父节点):获取标签元素的父节点。  
nodeType:节点类型的识别，nodeType==1 其1是表示元素节点;3是表示文本节点;
如：alert(document.body.childNodes[0].nodeType):弹出节点类型
children这个就是childNodes获取元素的子节点的升级版，因为它兼容更多的浏览器,它作用也是获取元素的子节;

DOM节点：
首尾子节点（有兼容性问题）
兄弟节点（有兼容性问题）

元素属性的操作：
第一种：oDiv.style.display='block';
第二种：oDiv.style.['display']='block';
第三种：如下

DOM方式操作元素属性：
获取元素属性：getAttribute('属性名')
设置元素属性：setAttribute('属性名'，'属性值')
删除元素属性：removeAttribute('属性名')

DOM元素的获取方式：
1、document.getElementById('ID名');一次选1个，
2、document.getElementsByTagName('标签名');标签相同的都被选中，用for（length）
3、document.getElementsByClassName('标签名')函数调用，className

【同时添加多个样式属性】

firefox等可以使用
	document.getElementById("id").setAttribute("style","top:20px;left:20px;color:red;");

IE中则必须使用style.cssText
	document.getElementById("id").style.cssText = "top:20px;left:20px;color:red;";


/-----------BOM-----------/
作用：是JS用来操作浏览器的(window)
系统对话框：
1、警告框：alert("内容");
2、选择框：confirm（"要提问的内容"），返回boolean布尔值
3、输入框：prompt(),返回用户输入的字符，或null;

window对象常用事件：

window.onload：当页面加载完成的时候
window.onscroll：当页面滚动的时候
window.onresize：当页面重定大小的时候

window.onresize=window.onload=window.onscroll=function ()

alert(window.navigator.userAgent);//弹出查看当前浏览器的版本！

尺寸和坐标:

窗口尺寸、工作区尺寸
function(ev)
{
	var oEvent=ev||event;
}
一、可视区尺寸：
1、document.documentElement.clientWidth;可视区宽度
2、document.documentElement.clientHeight;可视区高度


二、滚动条距离：
document.body.scrollTop:
document.documentElement.scrollTop滚动条上项部距离
document.documentElement.scrollLeft滚动条左边距离

三、鼠标位置：
event.clientX页面可视区鼠标位置的横坐标
event.clientY页面可视区鼠标位置的竖坐标

四、标签元素尺寸、工作区距离：
offsetParent获取标签元素在页面上的实际位置。

offsetWidth:获取DIV的宽度,它包含了DVI的border,padding;边框，内边距
offsetHeight:获取DIV的高度,它包含了DVI的border,padding;边框，内边距
offsetLeft-10'px':元素左边距
offsetTop+10'px':元素上边距

/*------------------用getStyle代替offset-----------------*/
function getStyle(obj,attr)//用getStyle代替offsetWidth(因为offsetWidth加上border后会有很BUG，以后都不建议用offsetWidth了)
{
	if(obj.currentStyle)//判断传进来的参数(Div)是否支持currentStyle,
	{
		return obj.currentStyle[attr]
	}
	else
	{
		return getComputedStyle(obj,false)[attr];
	}
}

/-----------ajax-----------/
ajax的作用:ajax是一种网页开发技术,
1、从服务器读取文件（数据）;如（请求静态的TXT文件，动态数据,json,DOM创建元素，等）
2、无刷新数据读取，(减少服务器压力,)
3、它只能在服务器上去读取数据，
4、局部刷新(异步交互)：请求前显示部分网页文件,(传统的网页的区别是整体刷新)
5、提高用户体验，
XMLHttpRequest：(IE6不支持)用于在后台与服务器交换数据，在不重新加载整个网页的情况下，对网页的某部分进行更新，


/-----------文档碎片-----------/
document.createDocumentFragment()文档碎片，

可以提高DOM的操作性能，但在实际应用中也快不了多少，就快几十毫秒左右，
//它是将做的事情，先进行集合，然后再进行一次全部加载，


/-----------cookie的作用-----------/
	cookie它就只是一个字符串，让它保存在本地浏览器上，便用户减少输入时间，（记住用户名，记住密码，自动登录笔，）可它cookei进行，创建，查找，删除，
      用来保存本地浏览器上页面上的信息，如自动登录,记信用户名,记住密码之类的
      1.它和浏览器缓存没有任何关系，
      2.它完全由JavaScript控制的，
      3.在一个网站中共享一套的cookie，
      4.cookie有数量（理论上50个）的限制，
      5.cookie文件大小也有限制的，
      6.cookie有过期时间的，
      7cookie是完全存储在本地浏览器的，
      8.cookie是在服务器端运行的，

/-----------日期对象-----------/
var oDate=new Date();//创建日期对象

alert(oDate.getFullYear()+'年'+(oDate.getMonth()+1)+'月'+oDate.getDate()+'号');//获取当前年，月(是从0开始，所以+1)，日

var myDate = new Date();
myDate.getYear();  //获取当前年份(2位)
myDate.getFullYear();  //获取完整的年份(4位,1970-????)
myDate.getMonth();  //获取当前月份(0-11,0代表1月)
myDate.getDate();  //获取当前日(1-31)

myDate.getDay();  //获取当前星期X(0-6,0代表星期天)

myDate.getTime();  //获取当前时间(从1970.1.1开始的毫秒数)
myDate.getHours();  //获取当前小时数(0-23)
myDate.getMinutes();  //获取当前分钟数(0-59)
myDate.getSeconds();  //获取当前秒数(0-59)
myDate.getMilliseconds();  //获取当前毫秒数(0-999)

myDate.toLocaleDateString();  //获取当前日期
myDate.toLocaleTimeString();  //获取当前时间
myDate.toLocaleString();  //获取日期与时间



/-----------运动-----------/
setInterval(fnuction(),30)定时器

clearInterval(obj.mupiao)//清除鼠标当前DIV的定时器

obj.mupiao=setInterval(function()//定义一个定时器，并赋给mupiao

iSpeed=iSpeed>0?Math.ceil(iSpeed):Math.floor(iSpeed);//取整，把iSpeed取出来的小数点去掉，

obj.style.width=obj.offsetWidth+iSpeed+'px';//向目标移动，



/-----------面向对象-----------/

面对过程:写起来简单,直观,用起来不方便
面向对象:写起来复杂,用起来简单

什么是对象:?
在使用对象时,只关注对象所提供的功能,不用关注它的内部细节!(如收音机,JQuery)

面向对象是一种通说的思想,并非只有在编程中能用,其实任何事情都可以用!它是在现实生活的些具体事物的转换,

JS中的面向对象:

封装:封装对象,函数,让外部调用,
继承:在已有对象的基础上继承过来,可增加
多态:多种功能,

JS对象的组成:

方法:函数,过程,动态的
属性:变量,状态,静态的

构造函数:用函数构造一个对象(函数里面装对象)

函数==(函数,方法,事件处理函数,构造函数)这4种其实都是函数:当作用不同时,叫法就不一样!

 类           模子
对象(实例)    蛋糕

例:var arr=new Array();

Array类   不具备实际功能,只能用来构造一个对象
arr对象   真正有功能的,是实被类构造出来的,

prototype:原型(类)=给一类对元素加方法
重要作用:可以扩展系统对象

Array.prototype.sum = function();

JS系统对象:

Function.protytpe.fn = fnuction();



